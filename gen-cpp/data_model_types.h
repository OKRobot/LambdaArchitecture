/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef data_model_TYPES_H
#define data_model_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>




struct GenderType {
  enum type {
    MALE = 1,
    FEMALE = 2
  };
};

extern const std::map<int, const char*> _GenderType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const GenderType::type& val);

class PersonID;

class PageID;

class EquivEdge;

class LinkedEdge;

class PageViewEdge;

class PagePropertyValue;

class PageProperty;

class Location;

class PersonPropertyValue;

class PersonProperty;

class DataUnit;

class Pedigree;

class Data;

typedef struct _PersonID__isset {
  _PersonID__isset() : cookie(false), user_id(false) {}
  bool cookie :1;
  bool user_id :1;
} _PersonID__isset;

class PersonID : public virtual ::apache::thrift::TBase {
 public:

  PersonID(const PersonID&);
  PersonID& operator=(const PersonID&);
  PersonID() : cookie(), user_id(0) {
  }

  virtual ~PersonID() throw();
  std::string cookie;
  int64_t user_id;

  _PersonID__isset __isset;

  void __set_cookie(const std::string& val);

  void __set_user_id(const int64_t val);

  bool operator == (const PersonID & rhs) const
  {
    if (__isset.cookie != rhs.__isset.cookie)
      return false;
    else if (__isset.cookie && !(cookie == rhs.cookie))
      return false;
    if (__isset.user_id != rhs.__isset.user_id)
      return false;
    else if (__isset.user_id && !(user_id == rhs.user_id))
      return false;
    return true;
  }
  bool operator != (const PersonID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PersonID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PersonID &a, PersonID &b);

std::ostream& operator<<(std::ostream& out, const PersonID& obj);

typedef struct _PageID__isset {
  _PageID__isset() : url(false) {}
  bool url :1;
} _PageID__isset;

class PageID : public virtual ::apache::thrift::TBase {
 public:

  PageID(const PageID&);
  PageID& operator=(const PageID&);
  PageID() : url() {
  }

  virtual ~PageID() throw();
  std::string url;

  _PageID__isset __isset;

  void __set_url(const std::string& val);

  bool operator == (const PageID & rhs) const
  {
    if (__isset.url != rhs.__isset.url)
      return false;
    else if (__isset.url && !(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const PageID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PageID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PageID &a, PageID &b);

std::ostream& operator<<(std::ostream& out, const PageID& obj);


class EquivEdge : public virtual ::apache::thrift::TBase {
 public:

  EquivEdge(const EquivEdge&);
  EquivEdge& operator=(const EquivEdge&);
  EquivEdge() {
  }

  virtual ~EquivEdge() throw();
  PersonID id1;
  PersonID id2;

  void __set_id1(const PersonID& val);

  void __set_id2(const PersonID& val);

  bool operator == (const EquivEdge & rhs) const
  {
    if (!(id1 == rhs.id1))
      return false;
    if (!(id2 == rhs.id2))
      return false;
    return true;
  }
  bool operator != (const EquivEdge &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EquivEdge & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EquivEdge &a, EquivEdge &b);

std::ostream& operator<<(std::ostream& out, const EquivEdge& obj);


class LinkedEdge : public virtual ::apache::thrift::TBase {
 public:

  LinkedEdge(const LinkedEdge&);
  LinkedEdge& operator=(const LinkedEdge&);
  LinkedEdge() {
  }

  virtual ~LinkedEdge() throw();
  PageID source;
  PageID target;

  void __set_source(const PageID& val);

  void __set_target(const PageID& val);

  bool operator == (const LinkedEdge & rhs) const
  {
    if (!(source == rhs.source))
      return false;
    if (!(target == rhs.target))
      return false;
    return true;
  }
  bool operator != (const LinkedEdge &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LinkedEdge & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LinkedEdge &a, LinkedEdge &b);

std::ostream& operator<<(std::ostream& out, const LinkedEdge& obj);


class PageViewEdge : public virtual ::apache::thrift::TBase {
 public:

  PageViewEdge(const PageViewEdge&);
  PageViewEdge& operator=(const PageViewEdge&);
  PageViewEdge() : nonce(0) {
  }

  virtual ~PageViewEdge() throw();
  PersonID person;
  PageID page;
  int64_t nonce;

  void __set_person(const PersonID& val);

  void __set_page(const PageID& val);

  void __set_nonce(const int64_t val);

  bool operator == (const PageViewEdge & rhs) const
  {
    if (!(person == rhs.person))
      return false;
    if (!(page == rhs.page))
      return false;
    if (!(nonce == rhs.nonce))
      return false;
    return true;
  }
  bool operator != (const PageViewEdge &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PageViewEdge & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PageViewEdge &a, PageViewEdge &b);

std::ostream& operator<<(std::ostream& out, const PageViewEdge& obj);

typedef struct _PagePropertyValue__isset {
  _PagePropertyValue__isset() : page_views(false) {}
  bool page_views :1;
} _PagePropertyValue__isset;

class PagePropertyValue : public virtual ::apache::thrift::TBase {
 public:

  PagePropertyValue(const PagePropertyValue&);
  PagePropertyValue& operator=(const PagePropertyValue&);
  PagePropertyValue() : page_views(0) {
  }

  virtual ~PagePropertyValue() throw();
  int32_t page_views;

  _PagePropertyValue__isset __isset;

  void __set_page_views(const int32_t val);

  bool operator == (const PagePropertyValue & rhs) const
  {
    if (__isset.page_views != rhs.__isset.page_views)
      return false;
    else if (__isset.page_views && !(page_views == rhs.page_views))
      return false;
    return true;
  }
  bool operator != (const PagePropertyValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PagePropertyValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PagePropertyValue &a, PagePropertyValue &b);

std::ostream& operator<<(std::ostream& out, const PagePropertyValue& obj);


class PageProperty : public virtual ::apache::thrift::TBase {
 public:

  PageProperty(const PageProperty&);
  PageProperty& operator=(const PageProperty&);
  PageProperty() {
  }

  virtual ~PageProperty() throw();
  PageID id;
  PagePropertyValue property;

  void __set_id(const PageID& val);

  void __set_property(const PagePropertyValue& val);

  bool operator == (const PageProperty & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(property == rhs.property))
      return false;
    return true;
  }
  bool operator != (const PageProperty &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PageProperty & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PageProperty &a, PageProperty &b);

std::ostream& operator<<(std::ostream& out, const PageProperty& obj);

typedef struct _Location__isset {
  _Location__isset() : city(false), state(false), country(false) {}
  bool city :1;
  bool state :1;
  bool country :1;
} _Location__isset;

class Location : public virtual ::apache::thrift::TBase {
 public:

  Location(const Location&);
  Location& operator=(const Location&);
  Location() : city(), state(), country() {
  }

  virtual ~Location() throw();
  std::string city;
  std::string state;
  std::string country;

  _Location__isset __isset;

  void __set_city(const std::string& val);

  void __set_state(const std::string& val);

  void __set_country(const std::string& val);

  bool operator == (const Location & rhs) const
  {
    if (__isset.city != rhs.__isset.city)
      return false;
    else if (__isset.city && !(city == rhs.city))
      return false;
    if (__isset.state != rhs.__isset.state)
      return false;
    else if (__isset.state && !(state == rhs.state))
      return false;
    if (__isset.country != rhs.__isset.country)
      return false;
    else if (__isset.country && !(country == rhs.country))
      return false;
    return true;
  }
  bool operator != (const Location &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Location & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Location &a, Location &b);

std::ostream& operator<<(std::ostream& out, const Location& obj);

typedef struct _PersonPropertyValue__isset {
  _PersonPropertyValue__isset() : full_name(false), gender(false), location(false), age(false) {}
  bool full_name :1;
  bool gender :1;
  bool location :1;
  bool age :1;
} _PersonPropertyValue__isset;

class PersonPropertyValue : public virtual ::apache::thrift::TBase {
 public:

  PersonPropertyValue(const PersonPropertyValue&);
  PersonPropertyValue& operator=(const PersonPropertyValue&);
  PersonPropertyValue() : full_name(), gender((GenderType::type)0), age(0) {
  }

  virtual ~PersonPropertyValue() throw();
  std::string full_name;
  GenderType::type gender;
  Location location;
  int16_t age;

  _PersonPropertyValue__isset __isset;

  void __set_full_name(const std::string& val);

  void __set_gender(const GenderType::type val);

  void __set_location(const Location& val);

  void __set_age(const int16_t val);

  bool operator == (const PersonPropertyValue & rhs) const
  {
    if (__isset.full_name != rhs.__isset.full_name)
      return false;
    else if (__isset.full_name && !(full_name == rhs.full_name))
      return false;
    if (__isset.gender != rhs.__isset.gender)
      return false;
    else if (__isset.gender && !(gender == rhs.gender))
      return false;
    if (__isset.location != rhs.__isset.location)
      return false;
    else if (__isset.location && !(location == rhs.location))
      return false;
    if (__isset.age != rhs.__isset.age)
      return false;
    else if (__isset.age && !(age == rhs.age))
      return false;
    return true;
  }
  bool operator != (const PersonPropertyValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PersonPropertyValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PersonPropertyValue &a, PersonPropertyValue &b);

std::ostream& operator<<(std::ostream& out, const PersonPropertyValue& obj);


class PersonProperty : public virtual ::apache::thrift::TBase {
 public:

  PersonProperty(const PersonProperty&);
  PersonProperty& operator=(const PersonProperty&);
  PersonProperty() {
  }

  virtual ~PersonProperty() throw();
  PersonID id;
  PersonPropertyValue property;

  void __set_id(const PersonID& val);

  void __set_property(const PersonPropertyValue& val);

  bool operator == (const PersonProperty & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(property == rhs.property))
      return false;
    return true;
  }
  bool operator != (const PersonProperty &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PersonProperty & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PersonProperty &a, PersonProperty &b);

std::ostream& operator<<(std::ostream& out, const PersonProperty& obj);

typedef struct _DataUnit__isset {
  _DataUnit__isset() : person_property(false), page_property(false), equiv(false), page_view(false), page_link(false) {}
  bool person_property :1;
  bool page_property :1;
  bool equiv :1;
  bool page_view :1;
  bool page_link :1;
} _DataUnit__isset;

class DataUnit : public virtual ::apache::thrift::TBase {
 public:

  DataUnit(const DataUnit&);
  DataUnit& operator=(const DataUnit&);
  DataUnit() {
  }

  virtual ~DataUnit() throw();
  PersonProperty person_property;
  PageProperty page_property;
  EquivEdge equiv;
  PageViewEdge page_view;
  LinkedEdge page_link;

  _DataUnit__isset __isset;

  void __set_person_property(const PersonProperty& val);

  void __set_page_property(const PageProperty& val);

  void __set_equiv(const EquivEdge& val);

  void __set_page_view(const PageViewEdge& val);

  void __set_page_link(const LinkedEdge& val);

  bool operator == (const DataUnit & rhs) const
  {
    if (__isset.person_property != rhs.__isset.person_property)
      return false;
    else if (__isset.person_property && !(person_property == rhs.person_property))
      return false;
    if (__isset.page_property != rhs.__isset.page_property)
      return false;
    else if (__isset.page_property && !(page_property == rhs.page_property))
      return false;
    if (__isset.equiv != rhs.__isset.equiv)
      return false;
    else if (__isset.equiv && !(equiv == rhs.equiv))
      return false;
    if (__isset.page_view != rhs.__isset.page_view)
      return false;
    else if (__isset.page_view && !(page_view == rhs.page_view))
      return false;
    if (__isset.page_link != rhs.__isset.page_link)
      return false;
    else if (__isset.page_link && !(page_link == rhs.page_link))
      return false;
    return true;
  }
  bool operator != (const DataUnit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataUnit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DataUnit &a, DataUnit &b);

std::ostream& operator<<(std::ostream& out, const DataUnit& obj);


class Pedigree : public virtual ::apache::thrift::TBase {
 public:

  Pedigree(const Pedigree&);
  Pedigree& operator=(const Pedigree&);
  Pedigree() : true_as_of_secs(0) {
  }

  virtual ~Pedigree() throw();
  int32_t true_as_of_secs;

  void __set_true_as_of_secs(const int32_t val);

  bool operator == (const Pedigree & rhs) const
  {
    if (!(true_as_of_secs == rhs.true_as_of_secs))
      return false;
    return true;
  }
  bool operator != (const Pedigree &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Pedigree & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Pedigree &a, Pedigree &b);

std::ostream& operator<<(std::ostream& out, const Pedigree& obj);


class Data : public virtual ::apache::thrift::TBase {
 public:

  Data(const Data&);
  Data& operator=(const Data&);
  Data() {
  }

  virtual ~Data() throw();
  Pedigree pedigree;
  DataUnit dataunit;

  void __set_pedigree(const Pedigree& val);

  void __set_dataunit(const DataUnit& val);

  bool operator == (const Data & rhs) const
  {
    if (!(pedigree == rhs.pedigree))
      return false;
    if (!(dataunit == rhs.dataunit))
      return false;
    return true;
  }
  bool operator != (const Data &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Data & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Data &a, Data &b);

std::ostream& operator<<(std::ostream& out, const Data& obj);



#endif
